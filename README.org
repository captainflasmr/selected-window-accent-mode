#+title: selected-window-accent-mode
#+author: James Dyer
#+options: toc:nil author:t title:t num:t
#+startup: showall

* Summary

The Selected Window Accent Mode is an Emacs package designed to visually distinguish the currently selected window by applying a unique accent color to its fringes, mode line, header line, and margins.

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:selected-window-accent-mode-00.jpg]]

* Quick Start (emacs 29)

Add the following to the emacs init for a tiling window manager feel (see image above):

#+begin_src elisp
(use-package selected-window-accent-mode
  :vc (:fetcher github :repo "captainflasmr/selected-window-accent-mode")
  :custom
  (selected-window-accent-fringe-thickness 10)
  (selected-window-accent-custom-color "#916941")
  (selected-window-accent-mode-style 'tiling))

(selected-window-accent-mode 1)
#+end_src

* Installation

** use-package (emacs 29)

Put the following into your emacs init file:

#+begin_src elisp
(use-package selected-window-accent-mode
  :vc (:fetcher github :repo "captainflasmr/selected-window-accent-mode"))
#+end_src

** use-package (MELPA)

- TODO (see roadmap below)

** from source

Download the `.el` file and place it in your Emacs `load-path`.

Then either manually load it or add it to your configuration to be loaded at startup.

#+begin_src elisp
(require 'selected-window-accent-mode)
#+end_src

* Usage

Interactively Toggle the mode on and off =M-x selected-window-accent-mode=

Interactively change the current style =M-x switch-selected-window-accent-style= which will present a =completing-read= selection in the minibuffer

The styles that are currently supported :

- default
- tiling
- subtle

see *roadmap* below for a description.

Typically I have bound these two interactive functions to a new keymap where I keep all my emacs visual change functions.

#+begin_src elisp
(defvar my-win-keymap (make-sparse-keymap))
(global-set-key (kbd "M-o") my-win-keymap)
(define-key my-win-keymap (kbd "a") 'selected-window-accent-mode)
(define-key my-win-keymap (kbd "y") 'switch-selected-window-accent-style)
#+end_src

* Examples

** Example 1 - Default / custom color

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:selected-window-accent-mode-01.jpg]]

To enable the accent mode automatically upon starting Emacs, add the following line to your `.emacs` or `init.el` file:

#+begin_src elisp
(use-package selected-window-accent-mode
  :vc (:fetcher github :repo "captainflasmr/selected-window-accent-mode")
  :custom
  (selected-window-accent-fringe-thickness 20)
  (selected-window-accent-custom-color "goldenrod")
  (selected-window-accent-mode-style 'default))

(selected-window-accent-mode 1)
#+end_src

This will accent the modeline only for the selected window with the =goldenrod= color.

** Example 2 - Tiling / custom color / custom fringe thickness

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:selected-window-accent-mode-02.jpg]]

#+begin_src elisp
(setq selected-window-accent-fringe-thickness 6)
(setq selected-window-accent-custom-color "#4179b2")
(setq selected-window-accent-mode-style 'tiling)

(selected-window-accent-mode 1)
#+end_src

This will accent the full outline of the window with the color #4179b2 more akin to a tiling window manager.

** Example 3 - Tiling / theme highlight color

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:selected-window-accent-mode-03.jpg]]

#+begin_src elisp
(setq selected-window-accent-fringe-thickness 6)
(setq selected-window-accent-custom-color nil)
(setq selected-window-accent-mode-style 'tiling)

(selected-window-accent-mode 1)
#+end_src

This will accent the full outline of the window with the =highlight= color taken from the current theme.

** Example 4 - Subtle / custom fringe thickness (thick)

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:selected-window-accent-mode-04.jpg]]

#+begin_src elisp
(setq selected-window-accent-fringe-thickness 20)
(setq selected-window-accent-custom-color nil)
(setq selected-window-accent-mode-style 'subtle)

(selected-window-accent-mode 1)
#+end_src

This will accent the modeline and just the left fringe and in this case be quite a pronounced thick accent.

* Customization

These are the entries in the emacs help / documentation, at some stage I shall push-block these to the elisp file itsself to ensure consistency but for the moment I could need to source START END refactor my existing routine.

** selected-window-accent-fringe-thickness

The thickness of the fringes in pixels.

This thickness is used when the selected-window-accent-mode-style is either tiling or subtle.

** selected-window-accent-custom-color

Custom accent color for the selected window.

When set to a color, this color will override the default highlight face background color as the accent color for the selected window.  Setting this to nil disables the custom color, reverting to the default behavior.

** selected-window-accent-mode

Mode variable for `selected-window-accent-mode'.

When non-nil, the `selected-window-accent-mode` is active, accenting the selected window according to the style defined in `selected-window-accent-mode-style`.

** selected-window-accent-mode-style

Current style for accenting the selected window.

The style determines how the selected window is visually distinguished from unselected ones.

- 'default: No special styling, uses the default Emacs appearance.

- 'tiling: Accentuates the fringes and mode line of the selected window with a thicker appearance, based on `selected-window-accent-fringe-thickness`.

- 'subtle: Adds a subtle accent to the selected window with minimal visual change."

* Minor Mode

The =selected-window-accent-mode= is a global minor mode that you can toggle to enable or disable the accenting of the selected window.

When enabled, it distinguishes the selected window with a special accent color.

* Hooks

Two hooks are used to automatically update the window accents when the window configuration or state changes:

- window-configuration-change-hook
- window-state-change-hook

These are added when the =selected-window-accent-mode= is enabled and removed when disabled.

* TODOs / ROADMAP

  
  ____________________ 0.2 + / roadmap ____________________
  
  TODO Incorporate `mode-line-active' and `mode-line-inactive' somehow as this would make more sense especially in the 'default mode.
  
  TODO header-line not shown on window split - I have a funny feeling this could be very difficult, if not impossible!
  
  TODO Customization syncing with my README documentation - at some stage I shall push-block these to the elisp file itsself to ensure consistency but for the moment I could need to source START END refactor my existing routin.
  
  TODO restore modeline height when switching between modes
  
  TODO adjust the not selected-window margin to avoid little window navigation. disruption, hence translating a fringe pixel width to a number of margin characters, not quite sure how I am going to do this yet.
  
  WATCH careful with removing header-line on all windows, for example magit commit window and probably some others may need to add some logic depending on mode.
  
  WATCH possible overheads of updating visual elements for each window?
  
  TODO excess selected-window disruption in header-line. (not sure I can do much about this)
  
  TODO add to MELPA
  
  TODO define more custom variables:
  
    - accent color saturation adjustment
    - accent color darken adjustment
    - accent color hue adjustment
    - compensating margin
  
  TODO define which theme face attribute to use as the main accent color
  
    Currently the default is to use the `highlight' face
  
  DOING implement accent styles
  
  DOING `tiling' - /top/right/bottom/left/ - typically a squished modeline and header line to a general accent thickness to provide a typical tiling window manager focussed outline experience
  
  DOING `subtle' - /left/bottom/
  
* Testing

See CHANGELOG.org
